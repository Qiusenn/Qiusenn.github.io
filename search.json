[{"title":"单向数据流","date":"2021-12-19T12:49:39.000Z","url":"/2021/12/19/%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81/","categories":[["Vue","/categories/Vue/"]],"content":" Vue 单向数据流 所有的 prop 都使得其父子 prop 之前形成了一个单向下行组件绑定: 父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件以外的改变父组件的状态。从而导致你的应用的数据流难以理解。 额外的，每次父组件发生更新时，子组件中所有的 prop 都会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop 。如果你这样做了，Vue会在浏览器的控制台中发出警告。 子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，有父组件修改。 两种常见的试图改变一个 prop 的情形 这个 prop 用来传递一个初始值; 这个子组件接下来希望将作为一个本地的 prop数据来使用。在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值。 这个 prop 以一种原始的值传入且需要进行转换。 在这种情况下，最好使用这个 prop 的值来定义一个计算属性。 "},{"title":"spa单页面","date":"2021-12-19T12:17:18.000Z","url":"/2021/12/19/spa%E5%8D%95%E9%A1%B5%E9%9D%A2%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81/","categories":[["Vue","/categories/Vue/"]],"content":" SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。 优点 用户体验好、块，内容的改变不需要加载整个页面，避免了不必要的跳转和重复渲染; 基于上面一点，SPA相对于服务器压力小 前后端职责分离，架构清晰，前端进行交互逻辑。后端负责数据处理 缺点 初次加载耗时较多: 为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将JavaScript、CSS 统一加载，部分页面按需加载; 前进后退路由管理: 由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能。所有的页面切换需要自己简历堆栈管理; SEO 难度较大: 由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。 "},{"title":"DEMO","date":"2021-12-18T16:00:00.000Z","url":"/2021/12/19/%E6%96%B0%E5%BB%BA%20%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3/","categories":[["DEMO","/categories/DEMO/"]],"content":"this is a demo from generated pages 这是一个demo"}]